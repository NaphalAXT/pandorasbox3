<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BoxCL</name>
    </assembly>
    <members>
        <member name="T:TheBox.Data.Location">
            <summary>
            Describes a location entry for Pandora's travel agent
            </summary>
        </member>
        <member name="M:TheBox.Data.Location.ArrayToNodes(System.Collections.ArrayList)">
            <summary>
            Converts a collection of Location structures to a TreeNodeCollection
            </summary>
            <param name="list">A collection of Location structures</param>
            <returns>A TreeNodeCollection object containing nodes for all the locations in the list</returns>
        </member>
        <member name="M:TheBox.Data.Location.ToString">
            <summary>
            Converts this location to a string
            </summary>
            <returns></returns>
        </member>
        <member name="M:TheBox.Data.Location.CompareTo(System.Object)">
            <summary>
            Compares this Location to another object
            </summary>
            <param name="obj">The object to compare to</param>
            <returns>The result value of the comparison</returns>
        </member>
        <member name="P:TheBox.Data.Location.Name">
            <summary>
            Gets or sets the name of the location
            </summary>
        </member>
        <member name="P:TheBox.Data.Location.X">
            <summary>
            Gets or sets the X coordinate of the location
            </summary>
        </member>
        <member name="P:TheBox.Data.Location.Y">
            <summary>
            Gets or sets the Y coordinate of the location
            </summary>
        </member>
        <member name="P:TheBox.Data.Location.Z">
            <summary>
            Gets or sets the Z coordinate of the location
            </summary>
        </member>
        <member name="P:TheBox.Data.Location.Map">
            <summary>
            Gets or sets the map the location resides on
            </summary>
        </member>
        <member name="T:TheBox.Common.RecentStringList">
            <summary>
            Provides a list of strings recently used
            </summary>
        </member>
        <member name="M:TheBox.Common.RecentStringList.#ctor">
            <summary>
            Creates a list of string that will feature the most recently used behaviour
            </summary>
        </member>
        <member name="M:TheBox.Common.RecentStringList.AddString(System.String)">
            <summary>
            Adds a string to the list and positions it in the recent list
            </summary>
            <param name="text">The string that should be added</param>
        </member>
        <member name="M:TheBox.Common.RecentStringList.GetArray">
            <summary>
            Gets an array of strings
            </summary>
            <returns>A string[] object or null if no string is in the collection</returns>
        </member>
        <member name="P:TheBox.Common.RecentStringList.List">
            <summary>
            Gets or sets the list of strings in the collection
            </summary>
        </member>
        <member name="P:TheBox.Common.RecentStringList.Capacity">
            <summary>
            Gets or sets the capacity of the collection
            </summary>
        </member>
        <member name="P:TheBox.Common.RecentStringList.Item(System.Int32)">
            <summary>
            Gets the string at a given position
            </summary>
        </member>
        <member name="T:TheBox.Common.BoxZLib">
            <summary>
            Provides access to compression and decompression
            </summary>
        </member>
        <member name="M:TheBox.Common.BoxZLib.CheckVersion">
            <summary>
            Checks the zlib version for compatibility
            </summary>
            <returns>True if the liberary version matches, false otherwise or if the library can't be found</returns>
        </member>
        <member name="M:TheBox.Common.BoxZLib.Compress(System.Object)">
            <summary>
            Compresses a Serializable object
            </summary>
            <param name="source">The Serializable object that should be compressed</param>
            <returns>An array of bytes</returns>
        </member>
        <member name="M:TheBox.Common.BoxZLib.Decompress(System.Byte[],System.Type)">
            <summary>
            Decompresses data corresponding to a Serializable object
            </summary>
            <param name="data">The array of bytes representing the compressed stream</param>
            <param name="type">The type of the object being deserialized</param>
            <returns>A Serializable object</returns>
        </member>
        <member name="M:TheBox.Common.BoxZLib.Compress(System.Byte[])">
            <summary>
            Compresses a stream of bytes
            </summary>
            <param name="data">The input data to be compressed</param>
            <returns>The compressed bytes stream</returns>
        </member>
        <member name="M:TheBox.Common.BoxZLib.Decompress(System.Byte[])">
            <summary>
            Decompresses a stream of bytes
            </summary>
            <param name="data">The bytes stream to decompress</param>
            <returns>The decompressed stream</returns>
        </member>
        <member name="T:TheBox.Common.FileIcon">
            <summary>
            Enables extraction of icons for any file type from
            the Shell.
            </summary>
        </member>
        <member name="M:TheBox.Common.FileIcon.GetSmallIcon(System.String)">
            <summary>
            Gets the small icon for a file
            </summary>
            <param name="file">The path to the file</param>
            <returns>An Icon object with the file icon</returns>
        </member>
        <member name="M:TheBox.Common.FileIcon.Dispose">
            <summary>
            Clears up any resources associated with the class
            </summary>
        </member>
        <member name="M:TheBox.Common.FileIcon.GetInfo">
            <summary>
             Gets the information for the specified 
             file name and flags.
            </summary>
        </member>
        <member name="M:TheBox.Common.FileIcon.#ctor">
            <summary>
            Constructs a new, default instance of the FileIcon
            class.  Specify the filename and call GetInfo()
            to retrieve an icon.
            </summary>
        </member>
        <member name="M:TheBox.Common.FileIcon.#ctor(System.String)">
            <summary>
            Constructs a new instance of the FileIcon class
            and retrieves the icon, display name and type name
            for the specified file.		
            </summary>
            <param name="fileName">The filename to get the icon, 
            display name and type name for</param>
        </member>
        <member name="M:TheBox.Common.FileIcon.#ctor(System.String,TheBox.Common.FileIcon.SHGetFileInfoConstants)">
            <summary>
            Constructs a new instance of the FileIcon class
            and retrieves the information specified in the 
            flags.
            </summary>
            <param name="fileName">The filename to get information
            for</param>
            <param name="flags">The flags to use when extracting the
            icon and other shell information.</param>
        </member>
        <member name="P:TheBox.Common.FileIcon.Flags">
            <summary>
            Gets/sets the flags used to extract the icon
            </summary>
        </member>
        <member name="P:TheBox.Common.FileIcon.FileName">
            <summary>
            Gets/sets the filename to get the icon for
            </summary>
        </member>
        <member name="P:TheBox.Common.FileIcon.ShellIcon">
            <summary>
            Gets the icon for the chosen file
            </summary>
        </member>
        <member name="P:TheBox.Common.FileIcon.DisplayName">
            <summary>
            Gets the display name for the selected file
            if the SHGFI_DISPLAYNAME flag was set.
            </summary>
        </member>
        <member name="P:TheBox.Common.FileIcon.TypeName">
            <summary>
            Gets the type name for the selected file
            if the SHGFI_TYPENAME flag was set.
            </summary>
        </member>
        <member name="T:TheBox.Common.FileIcon.SHGetFileInfoConstants">
            <summary>
            Flags which control FileIcon behaviour
            </summary>
        </member>
        <member name="F:TheBox.Common.FileIcon.SHGetFileInfoConstants.SHGFI_ICON">
            <summary>
            Get icon.  Combine with SHGFI_LARGEICON, SHGFI_SMALLICON,
            SHGFI_OPENICON, SHGFI_SHELLICONSIZE, SHGFI_LINKOVERLAY,
            SHGFI_SELECTED, SHGFI_ADDOVERLAYS to specify icon
            size.
            </summary>
        </member>
        <member name="F:TheBox.Common.FileIcon.SHGetFileInfoConstants.SHGFI_DISPLAYNAME">
            <summary>
            Get the Display name of the file.
            </summary>
        </member>
        <member name="F:TheBox.Common.FileIcon.SHGetFileInfoConstants.SHGFI_TYPENAME">
            <summary>
            Get the TypeName of the file.
            </summary>
        </member>
        <member name="F:TheBox.Common.FileIcon.SHGetFileInfoConstants.SHGFI_ATTRIBUTES">
            <summary>
            Get the attributes of the file.
            </summary>
        </member>
        <member name="F:TheBox.Common.FileIcon.SHGetFileInfoConstants.SHGFI_ICONLOCATION">
            <summary>
            Get the icon location (not used in this class)
            </summary>
        </member>
        <member name="F:TheBox.Common.FileIcon.SHGetFileInfoConstants.SHGFI_EXETYPE">
            <summary>
            Get the exe type (not used in this class)
            </summary>
        </member>
        <member name="F:TheBox.Common.FileIcon.SHGetFileInfoConstants.SHGFI_SYSICONINDEX">
            <summary>
            Get the index of the icon in the System Image List (use
            vbAccelerator SystemImageList class instead)
            </summary>
        </member>
        <member name="F:TheBox.Common.FileIcon.SHGetFileInfoConstants.SHGFI_LINKOVERLAY">
            <summary>
            Put a link overlay on icon 
            </summary>
        </member>
        <member name="F:TheBox.Common.FileIcon.SHGetFileInfoConstants.SHGFI_SELECTED">
            <summary>
            Show icon in selected state 
            </summary>
        </member>
        <member name="F:TheBox.Common.FileIcon.SHGetFileInfoConstants.SHGFI_ATTR_SPECIFIED">
            <summary>
            Get only specified attributes (not supported in this class)
            </summary>
        </member>
        <member name="F:TheBox.Common.FileIcon.SHGetFileInfoConstants.SHGFI_LARGEICON">
            <summary>
            get large icon 
            </summary>
        </member>
        <member name="F:TheBox.Common.FileIcon.SHGetFileInfoConstants.SHGFI_SMALLICON">
            <summary>
            get small icon 
            </summary>
        </member>
        <member name="F:TheBox.Common.FileIcon.SHGetFileInfoConstants.SHGFI_OPENICON">
            <summary>
            get open icon 
            </summary>
        </member>
        <member name="F:TheBox.Common.FileIcon.SHGetFileInfoConstants.SHGFI_SHELLICONSIZE">
            <summary>
            get shell size icon 
            </summary>
        </member>
        <member name="F:TheBox.Common.FileIcon.SHGetFileInfoConstants.SHGFI_USEFILEATTRIBUTES">
            <summary>
            Use passed dwFileAttribute
            </summary>
        </member>
        <member name="F:TheBox.Common.FileIcon.SHGetFileInfoConstants.SHGFI_ADDOVERLAYS">
            <summary>
            Apply the appropriate overlays
            </summary>
        </member>
        <member name="F:TheBox.Common.FileIcon.SHGetFileInfoConstants.SHGFI_OVERLAYINDEX">
            <summary>
            Get the index of the overlay (not used in this class)
            </summary>
        </member>
        <member name="T:TheBox.Common.NetUtility">
            <summary>
            Provides utilities for online stuff managment
            </summary>
        </member>
        <member name="M:TheBox.Common.NetUtility.GetDataFromHttp(System.String)">
            <summary>
            Retrieves the content of a web url (uses http protocol)
            [NOT SUPPORTED]
            </summary>
            <param name="url">The url to retrieve</param>
            <returns>A MemoryStream object containing the contents read. Returns null if an error occurs or the stream is empty.</returns>
        </member>
        <member name="M:TheBox.Common.NetUtility.GetFileFromHttp(System.String,System.String)">
            <summary>
            Retrieves a file using the http protocol and saves it to disk
            [NOT SUPPORTED]
            </summary>
            <param name="url">The url to retrieve from</param>
            <param name="destination">The destination filename</param>
            <returns>True if the operation was succesful</returns>
        </member>
        <member name="T:TheBox.Data.Facet">
            <summary>
            Describes and categorizes all the locations for a given facet
            </summary>
        </member>
        <member name="M:TheBox.Data.Facet.#ctor">
            <summary>
            Creates a new facet
            </summary>
        </member>
        <member name="M:TheBox.Data.Facet.GetTreeNode(System.String)">
            <summary>
            Gets a TreeNode corresponding to this facet
            </summary>
            <param name="name">The name of this facet</param>
            <returns></returns>
        </member>
        <member name="M:TheBox.Data.Facet.FromTreeNodes(System.Windows.Forms.TreeNodeCollection,System.Byte)">
            <summary>
            Creates a Facet object from a collection of tree nodes
            </summary>
            <param name="nodes">The TreeNodeCollection used as source for this Facet object</param>
            <param name="name">The map file index corresponding to this facet</param>
            <returns>A Facet object representing the nodes collection</returns>
        </member>
        <member name="M:TheBox.Data.Facet.AddLocation(TheBox.Data.Location,System.String,System.String)">
            <summary>
            Adds a new location to this facet
            </summary>
            <param name="loc">The location that should be added</param>
            <param name="category">The category name for the new location</param>
            <param name="subsection">The subsection name for the new location</param>
        </member>
        <member name="M:TheBox.Data.Facet.DeleteLocation(TheBox.Data.Location,System.String,System.String)">
            <summary>
            Removes a location from the list
            </summary>
            <param name="loc">The location object that should be deleted</param>
            <param name="category">The category it belongs to</param>
            <param name="subsection">The subsection parent of the location</param>
        </member>
        <member name="M:TheBox.Data.Facet.Search(System.Windows.Forms.TreeNodeCollection,System.String)">
            <summary>
            Searches the current facet for locations according to an input text
            </summary>
            <param name="nodes">The TreeNodeCollection representing the category nodes of a facet</param>
            <param name="text">The text to search for in the location names</param>
            <returns>A SearchResults object</returns>
        </member>
        <member name="P:TheBox.Data.Facet.MapValue">
            <summary>
            Gets or sets the map file corresponding to this facet
            </summary>
        </member>
        <member name="P:TheBox.Data.Facet.Nodes">
            <summary>
            Gets or sets the category nodes
            </summary>
        </member>
        <member name="T:TheBox.Common.SearchResults">
            <summary>
            Provides easy access to search results over TreeViews
            </summary>
        </member>
        <member name="M:TheBox.Common.SearchResults.#ctor">
            <summary>
            Creates a new SearchResults object
            </summary>
        </member>
        <member name="M:TheBox.Common.SearchResults.Add(TheBox.Common.Result)">
            <summary>
            Adds a new item to the results list
            </summary>
            <param name="result">The Result object being added to the results list</param>
        </member>
        <member name="M:TheBox.Common.SearchResults.GetNext">
            <summary>
            Gets the next result in the list
            </summary>
            <returns>The Result object corresponding to the next result in the list. Null if no results are in the list, or if the end of the list has been reached.</returns>
        </member>
        <member name="M:TheBox.Common.SearchResults.GetPrevious">
            <summary>
            Getst the previous result in the list
            </summary>
            <returns>The Result object corresponding to the previous result in the list. Null if the current is the first item.</returns>
        </member>
        <member name="M:TheBox.Common.SearchResults.MergeWith(TheBox.Common.SearchResults)">
            <summary>
            Merges the results provided by a second search results
            </summary>
            <param name="moreResults"></param>
        </member>
        <member name="P:TheBox.Common.SearchResults.Count">
            <summary>
            Gets the number of results found by the search
            </summary>
        </member>
        <member name="T:TheBox.Common.Result">
            <summary>
            Defines a single search result
            </summary>
        </member>
        <member name="M:TheBox.Common.Result.#ctor(System.Windows.Forms.TreeNode,System.Int32)">
            <summary>
            Creates a Result object
            </summary>
            <param name="node">The TreeNode containing the result</param>
            <param name="index">The index of the </param>
        </member>
        <member name="M:TheBox.Common.Result.CompareTo(System.Object)">
            <summary>
            Compares this result to another
            </summary>
            <param name="obj">The Result to compare to</param>
            <returns>The comparison result</returns>
        </member>
        <member name="P:TheBox.Common.Result.Node">
            <summary>
            Gets or sets the category node for this item
            </summary>
        </member>
        <member name="P:TheBox.Common.Result.Index">
            <summary>
            Gets or sets the index for the element to be displayed on the second treenode
            </summary>
        </member>
        <member name="T:TheBox.Common.Utility">
            <summary>
            Provides general purpose static functions
            </summary>
        </member>
        <member name="M:TheBox.Common.Utility.SendToUO(System.String)">
            <summary>
            Sends a string message to the UO window
            </summary>
            <param name="message">A string message that will be sent to UO</param>
        </member>
        <member name="M:TheBox.Common.Utility.FindCustomClient">
            <summary>
            Finds the process related to the
            </summary>
        </member>
        <member name="M:TheBox.Common.Utility.ClientClosed(System.Object,System.EventArgs)">
            <summary>
            Client closed, reset the process variable
            </summary>
        </member>
        <member name="M:TheBox.Common.Utility.SendMacro(System.Windows.Forms.Keys,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Sends a macro to the UO window
            </summary>
            <param name="macroKey">The character representing the macro</param>
            <param name="ctrl">Specifies whether ctrl is part of the macro</param>
            <param name="shift">Specifies whether ctrl is part of the macro</param>
            <param name="alt">Specifies whether ctrl is part of the macro</param>
        </member>
        <member name="M:TheBox.Common.Utility.GetClientWindow">
            <summary>
            Finds a pointer to the client window handle
            </summary>
            <returns>An IntPtr window handle</returns>
        </member>
        <member name="M:TheBox.Common.Utility.BringClientToFront">
            <summary>
            Brings the client window to front
            </summary>
        </member>
        <member name="M:TheBox.Common.Utility.BringWindowToFront(System.IntPtr)">
            <summary>
            Brings the specified window to the front of the Z order
            </summary>
            <param name="handle">A pointer to the window handle</param>
        </member>
        <member name="M:TheBox.Common.Utility.EnsureDirectory(System.String)">
            <summary>
            Verifies if a directory exists and if it doesn't it creates it
            </summary>
            <param name="path">The folder to ensure</param>
        </member>
        <member name="M:TheBox.Common.Utility.ValidateUOFolder(System.String)">
            <summary>
            Evaluates a folder for the presence of valid UO files
            </summary>
            <param name="path">The folder to examine</param>
            <returns>True if mul files are present in the folder</returns>
        </member>
        <member name="M:TheBox.Common.Utility.ValidateNumber(System.Int32,System.Int32,System.Int32)">
            <summary>
            Validates a number ensuring it's withing the supplied bounds
            </summary>
            <param name="value">The numder to validate</param>
            <param name="min">The lower bound for the value</param>
            <param name="max">The upper bound for the value</param>
            <returns>The validated number</returns>
        </member>
        <member name="M:TheBox.Common.Utility.SaveXml(System.Object,System.String)">
            <summary>
            Saves a serializable XML object to a XML file
            </summary>
            <param name="obj">The object to save</param>
            <param name="filename">The filename where the object should be saved</param>
            <returns>True if succesful, false otherwise</returns>
        </member>
        <member name="M:TheBox.Common.Utility.LoadXml(System.Type,System.String)">
            <summary>
            Loads an object from a XML file
            </summary>
            <param name="type">The type of the object stored in the XML file</param>
            <param name="filename">The filename to load</param>
            <returns>The object read, null if failed</returns>
        </member>
        <member name="M:TheBox.Common.Utility.DrawBorder(System.Windows.Forms.Control,System.Drawing.Graphics)">
            <summary>
            Draws a border around a control
            </summary>
            <param name="c">The control that should be applied the border</param>
            <param name="g">The graphics on which to draw</param>
        </member>
        <member name="M:TheBox.Common.Utility.ExtractEmbeddedResource(System.Reflection.Assembly,System.String,System.String)">
            <summary>
            Extracts an embedded resource and saves it to file
            </summary>
            <param name="assembly">The assmebly containing the resource</param>
            <param name="resource">The resource name</param>
            <param name="filename">The target filename for the resource</param>
        </member>
        <member name="M:TheBox.Common.Utility.GetEmbeddedObject(System.Type,System.String,System.Reflection.Assembly)">
            <summary>
            Retrieves an embedded xml-serialized object from a stream
            </summary>
            <param name="type">The type of the object</param>
            <param name="resource">The name of the resource</param>
            <param name="asm">The assembly containing the resource</param>
            <returns>The embedded object</returns>
        </member>
        <member name="M:TheBox.Common.Utility.GetDirectoryName(System.String)">
            <summary>
            Retrieves the name of a directory
            </summary>
            <param name="path">The directory</param>
            <returns>A string containing the name of a directory</returns>
        </member>
        <member name="M:TheBox.Common.Utility.CopyDirectory(System.String,System.String)">
            <summary>
            Copies a directory and all of its contents
            </summary>
            <param name="source">The source directory</param>
            <param name="dest">The destination directory</param>
            <remarks>This function exists because the Directory.Move() function doesn't
            allow directories to be moved between volumes</remarks>
            <returns>True if the operation has been successful</returns>
        </member>
        <member name="P:TheBox.Common.Utility.CustomClientPath">
            <summary>
            Gets or sets the custom client path used when sending commands to the UO window
            </summary>
        </member>
        <member name="T:TheBox.Common.HuesChart">
            <summary>
            Summary description for HuesChart.
            </summary>
        </member>
        <member name="M:TheBox.Common.HuesChart.OnHueChanged(System.EventArgs)">
            <summary>
            Fires the HueChanged event
            </summary>
        </member>
        <member name="M:TheBox.Common.HuesChart.#ctor">
            <summary>
            Creates a HueChart control
            </summary>
        </member>
        <member name="M:TheBox.Common.HuesChart.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:TheBox.Common.HuesChart.OnResize(System.EventArgs)">
            <summary>
            Don't allow resisizing, size must fit the hue chart size
            </summary>
        </member>
        <member name="M:TheBox.Common.HuesChart.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Painting routine
            </summary>
        </member>
        <member name="M:TheBox.Common.HuesChart.PaintHue(System.Int32,System.Drawing.Graphics)">
            <summary>
            Paints the rectangle corresponding to a specified hue on the supplied greaphics object
            </summary>
            <param name="index">The index of the hue that should be painted</param>
            <param name="g">The Graphics object used for the painting</param>
        </member>
        <member name="M:TheBox.Common.HuesChart.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handles the MouseDown event and fires the SelectedIndexChanged event
            </summary>
        </member>
        <member name="M:TheBox.Common.HuesChart.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Provides keyboard navigation of the chart
            </summary>
        </member>
        <member name="M:TheBox.Common.HuesChart.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Keys handling
            </summary>
        </member>
        <member name="P:TheBox.Common.HuesChart.Hues">
            <summary>
            Gets or sets the Hues used on the chart
            </summary>
        </member>
        <member name="P:TheBox.Common.HuesChart.SelectedIndex">
            <summary>
            Gets or sets the index of the selected hue
            </summary>
        </member>
        <member name="P:TheBox.Common.HuesChart.SelectedHue">
            <summary>
            Gets the selected Hue object
            </summary>
        </member>
        <member name="P:TheBox.Common.HuesChart.ColorTableIndex">
            <summary>
            Gets or sets the value that specifies which color from each hue is used to draw the hue
            </summary>
        </member>
        <member name="E:TheBox.Common.HuesChart.HueChanged">
            <summary>
            Occurs when the selected hue has changed
            </summary>
        </member>
        <member name="T:TheBox.Common.MulManager">
            <summary>
            Provides access to mul file locations
            </summary>
        </member>
        <member name="M:TheBox.Common.MulManager.#ctor">
            <summary>
            Creates a new MulManager object reading initial data from the registry
            </summary>
        </member>
        <member name="M:TheBox.Common.MulManager.GetExePath(System.String)">
            <summary>
            Gets the path to the UO exe from the registry
            </summary>
            <param name="subName">The class name of the UO installation</param>
            <returns>A path to the installation folder, null if none is found</returns>
        </member>
        <member name="P:TheBox.Common.MulManager.SupportedFiles">
            <summary>
            Gets the files supported by Pandora's Box
            </summary>
        </member>
        <member name="P:TheBox.Common.MulManager.CustomFolder">
            <summary>
            Gets or sets the custom UO installation folder
            </summary>
        </member>
        <member name="P:TheBox.Common.MulManager.DefaultFolder">
            <summary>
            Gets the default UO folder as found in the registry
            </summary>
        </member>
        <member name="P:TheBox.Common.MulManager.Table">
            <summary>
            Gets or sets the current list of key/values
            </summary>
        </member>
        <member name="P:TheBox.Common.MulManager.Item(System.String)">
            <summary>
            Gets the file corresponding to the specified file name
            </summary>
        </member>
        <member name="P:TheBox.Common.MulManager.Item(System.String,System.Object[])">
            <summary>
            Gets or sets a mul file, using string.Format() notation
            </summary>
        </member>
        <member name="T:TheBox.Mul.Hues">
            <summary>
            Summary description for Hues.
            </summary>
        </member>
        <member name="M:TheBox.Mul.Hues.#ctor">
            <summary>
            Creates an empty Hues object
            </summary>
        </member>
        <member name="M:TheBox.Mul.Hues.Load(System.String)">
            <summary>
            Loads a Hues object from a file
            </summary>
            <param name="FileName">The hues.mul file to read from</param>
            <returns>A Hues object</returns>
        </member>
        <member name="P:TheBox.Mul.Hues.Groups">
            <summary>
            Gets the hue groups
            </summary>
        </member>
        <member name="P:TheBox.Mul.Hues.Item(System.Int32)">
            <summary>
            Gets or sets a hue
            </summary>
        </member>
        <member name="T:TheBox.Mul.HueGroup">
            <summary>
            A group of 8 hues
            </summary>
        </member>
        <member name="M:TheBox.Mul.HueGroup.Read(System.IO.BinaryReader)">
            <summary>
            Reads a HueGroup
            </summary>
            <param name="reader">The reader of the data stream</param>
            <returns>A HueGroupd item</returns>
        </member>
        <member name="P:TheBox.Mul.HueGroup.HueList">
            <summary>
            Gets the list of hues in this groupd
            </summary>
        </member>
        <member name="T:TheBox.Mul.Hue">
            <summary>
            A UO Hue
            </summary>
        </member>
        <member name="M:TheBox.Mul.Hue.Read(System.IO.BinaryReader)">
            <summary>
            Reads a Hue
            </summary>
            <param name="reader">The data reader</param>
            <returns>The hue read</returns>
        </member>
        <member name="M:TheBox.Mul.Hue.Write(System.IO.BinaryWriter)">
            <summary>
            Writes the hue to a stream
            </summary>
            <param name="writer">The writer used to write the hue</param>
        </member>
        <member name="M:TheBox.Mul.Hue.ToColor(System.Int16)">
            <summary>
            Converts a RGB 555 value to a Color object
            </summary>
            <param name="rgb555color">The RGB 555 value to convert</param>
            <returns>A Color corresponding to the value</returns>
        </member>
        <member name="M:TheBox.Mul.Hue.GetSpectrum(System.Drawing.Size)">
            <summary>
            Gets a spectrum corresponding to this hue
            </summary>
            <param name="imgSize">The size of the spectrum</param>
            <returns>A 32x1 bitmap with the spectrum</returns>
        </member>
        <member name="P:TheBox.Mul.Hue.ColorTable">
            <summary>
            Gets or sets the color table for the hue
            </summary>
        </member>
        <member name="P:TheBox.Mul.Hue.Name">
            <summary>
            Gets or sets the 
            </summary>
        </member>
        <member name="T:TheBox.Common.GenericNode">
            <summary>
            GenericNode is a general purpose data structure shaped like a tree. Each node has
            a Name and a list of sub-items.
            </summary>
        </member>
        <member name="M:TheBox.Common.GenericNode.#ctor">
            <summary>
            Creates a new generic node object
            </summary>
        </member>
        <member name="M:TheBox.Common.GenericNode.#ctor(System.String)">
            <summary>
            Creates a new generic node object
            </summary>
            <param name="name">The name of the node</param>
        </member>
        <member name="M:TheBox.Common.GenericNode.CompareTo(System.Object)">
            <summary>
            Compares this GenericNode to a second GenericNode
            </summary>
            <param name="obj">The GenericNode to compare to</param>
            <returns>The comparison result</returns>
        </member>
        <member name="P:TheBox.Common.GenericNode.Name">
            <summary>
            Gets or sets the name of the node
            </summary>
        </member>
        <member name="P:TheBox.Common.GenericNode.Elements">
            <summary>
            Gets or sets the subelements of this node
            </summary>
        </member>
        <member name="T:TheBox.Common.ColorDef">
            <summary>
            Provides XML serializable information about a color
            </summary>
        </member>
        <member name="M:TheBox.Common.ColorDef.#ctor">
            <summary>
            Creates a new ColorDef object
            </summary>
        </member>
        <member name="M:TheBox.Common.ColorDef.#ctor(System.Drawing.Color)">
            <summary>
            Creates a new ColorDef object
            </summary>
            <param name="color">The color this ColorDef will represent</param>
        </member>
        <member name="P:TheBox.Common.ColorDef.Red">
            <summary>
            Gets or sets the red component of the color
            </summary>
        </member>
        <member name="P:TheBox.Common.ColorDef.Green">
            <summary>
            Gets or sets the green component of the color
            </summary>
        </member>
        <member name="P:TheBox.Common.ColorDef.Blue">
            <summary>
            Gets or sets the blue component of the color
            </summary>
        </member>
        <member name="P:TheBox.Common.ColorDef.Alpha">
            <summary>
            Gets or sets the alpha component of the color
            </summary>
        </member>
        <member name="P:TheBox.Common.ColorDef.Color">
            <summary>
            Gets or sets the color specified
            </summary>
        </member>
        <member name="T:TheBox.Common.RecentIntList">
            <summary>
            Listing of integers that updates accordingly to usage
            </summary>
        </member>
        <member name="M:TheBox.Common.RecentIntList.#ctor">
            <summary>
            Creates a new list of integers with recent behaviour
            </summary>
        </member>
        <member name="M:TheBox.Common.RecentIntList.Add(System.Int32)">
            <summary>
            Adds a new value to the list
            </summary>
            <param name="value">The integer to add</param>
        </member>
        <member name="M:TheBox.Common.RecentIntList.OnListChanged(System.EventArgs)">
            <summary>
            Fire the ListChanged event
            </summary>
        </member>
        <member name="P:TheBox.Common.RecentIntList.Capacity">
            <summary>
            Gets or sets the capacity of the list
            </summary>
        </member>
        <member name="P:TheBox.Common.RecentIntList.List">
            <summary>
            Gets or sets the list of items
            </summary>
        </member>
        <member name="P:TheBox.Common.RecentIntList.Item(System.Int32)">
            <summary>
            Gets the item at a given location in the list
            </summary>
        </member>
        <member name="E:TheBox.Common.RecentIntList.ListChanged">
            <summary>
            Occurs when the list has been changed
            </summary>
        </member>
        <member name="T:TheBox.Common.RecentList">
            <summary>
            Provides an implementation of a recently used objects list
            </summary>
        </member>
        <member name="M:TheBox.Common.RecentList.#ctor">
            <summary>
            Creates a new RecentList object
            </summary>
        </member>
        <member name="M:TheBox.Common.RecentList.#ctor(System.Int32)">
            <summary>
            Creates a new RecentList object
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:TheBox.Common.RecentList.Add(System.Object)">
            <summary>
            Adds an object to the list
            </summary>
            <param name="o">The object to add</param>
        </member>
        <member name="P:TheBox.Common.RecentList.Capacity">
            <summary>
            Gets or set the maximum capacity for the list
            </summary>
        </member>
        <member name="P:TheBox.Common.RecentList.List">
            <summary>
            Gets or sets the items in the list
            </summary>
        </member>
    </members>
</doc>
